The documentation for XForms, see e.g.

http://download.savannah.gnu.org/releases/xforms/forms.ps.gz

has become a bit outdated. Unfortunately, the sources for
the documentation aren't available anymore, so it will
have to be rewritten sometime in (hopefully not too far)
future. Since there have been a few additions they are
only documented here.


New functions:
--------------

There are three new functions for determining properties of
an object:

a) 
   void fl_get_object_bw( FL_OBJECT * obj,
                          int       * bw )

Returns the borderwidth set for object 'obj' via 'bw'.

b) 

   void fl_get_object_gravity( FL_OBJECT    * obj,
                               unsigned int * nw,
                               unsigned int * se )

Returns the NWgravity of object 'obj' via 'nw' and the
SEgravity via 'se'.

c)

   void fl_get_object_resize( FL_OBJECT *    obj,
                              unsigned int * resize )

Returns the resize setting for object 'obj'.


The next two functions allow to set and query to which mouse
buttons a button will react. Per default a button reacts to
all mouse buttons, including "clicks" generated by mouse
wheel. Sometimes this is not desired and the behaviour of
each button can be controlled via the function

   void fl_set_button_mouse_buttons( FL_OBJECT * ob,
							         int         mouse_buttons )

The 'mouse_button' argument is the inclusive or of the numbers
1 for the left mouse button, 2 for the middle and 3 for the
right mouse button, 4 for moving the scroll wheel up and 5
for scrolling down.

The corresponding function to find out to which mouse buttons
a button reacts is

   void fl_get_button_mouse_buttons( FL_OBJECT    * obj,
							         unsigned int * mouse_buttons )

which returns the setting for the button in the same way as
it has to be passed to fl_set_button_mouse_buttons().

This property of a buttons can also be set via fdesign under
the "Spec" tabfolder in the window for setting object attributes.


There is now a third goodie function for creating a message
box

   void fl_show_msg( const char * fmt, ... )

It expects a printf()-like format string 'fmt' and as many
more arguments as there are format specifiers in the format
string. The resulting string can have arbitrary length and
embedded newline characters ('\n') produce a line break. The
size of the message box gets set in a way that the whole text
fits into it.


The new function

   int fl_set_menu_notitle( FL_OBJECT * ob,
		                    int         off )

allows to switch off the "title" which per default is
displayed at the top of a menu. The second argment is a
boolean value, if non-zero the menu title will not be
displayed, if 0 they again be displayed. The function
returns the previous setting.

For FL_PUSH_MENU objects with the title set to off this
has teh additional the consequence that they only get
opened when the mouse button has been released and they
appear just below the menu button (just like in the case
of FL_PULLDOWN_MENU objects).


A final new function is

   void fl_get_decoration_sizes( FL_FORM * form,
                                 int     * top,
                                 int     * right,
                                 int     * bottom,
                                 int     * left );

It tries to determine the widths of the decorations the window
manager puts around the window 'form' is displazed in. The
function returns 0 if it was successful, 1 otherwise. 'form'
must be a form that is currently displayed and it can't be
a form embedded in another form (like e.g. forms that are
part of a tabfolder).


Miscellaneous changes
---------------------

The '-debug' option has been renamed to '-fldebug' to
avoid problems with programs that use the same option.

The new '-flhelp' option outputs a list of all options
that the library accepts.

The default borderwidth of object has been reduced to 1.

Input objects now lose the focus (and report changes back
to the program) on clicks of other objects that accept a
click with the mouse (buttons, sliders, etc.). This gets
around the problem that if one had an input field, edited
something in it (without hitting the ENTER or TAB key) and
then clicked on some button that's supposed to make use of
what just had been entered, the function fl_get_input() still
returned the unchanged value since the input field never lost
its focus and thus didn't accept the changes. 

When the mouse gets moved out of a window with an active input
object and moved into another window keyboard input now goes
to the new window instead of to the one that had been left.

Multi-line inpput object now also can be left by pressing the
<TAB> (or <Shift><Tab>) keys.

Date input fields handle verification of leap years correctly. 

ince the 0.89 version on calling fl_initialize() the locale for
the program was set to the default locale on the machine the pro-
gram was running on. Unfortunately, this was never documented
and led to trouble in several cases. This has now been removed.

When a file selector has a callback installed the field for
manually entering a file name isn't shown anymore - that field
could not be used anyway. 

Message boxes created by fl_show_message() and fl_show_messages()
now can display an unlimited amount of text and they automatically
get a size so that the whole text fits in.

fdesign and the library can now deal with an arbitrary number of
forms, groups and objects.

No error messages are output anymore via popup windows.
